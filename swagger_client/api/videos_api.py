# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VideosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_channel_video_count(self, id, **kwargs):  # noqa: E501
        """Get Channel Video Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_video_count(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ChannelVideoCountGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_channel_video_count_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_channel_video_count_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_channel_video_count_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Channel Video Count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_video_count_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: ChannelVideoCountGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_video_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_channel_video_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/channels/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChannelVideoCountGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos(self, **kwargs):  # noqa: E501
        """Get Videos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: limit
        :param str order: order
        :param str prioritize_featured: prioritize_featured
        :param str page: page
        :param str liked_by: liked_by
        :param str viewed_by: viewed_by
        :param str priority: Priority
        :param str followed_by: followed_by
        :param str playlists: playlists[]
        :param str : _
        :param str channels: channels[]
        :param str playlist_video: playlist_video
        :return: VideosGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_videos_with_http_info(self, **kwargs):  # noqa: E501
        """Get Videos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: limit
        :param str order: order
        :param str prioritize_featured: prioritize_featured
        :param str page: page
        :param str liked_by: liked_by
        :param str viewed_by: viewed_by
        :param str priority: Priority
        :param str followed_by: followed_by
        :param str playlists: playlists[]
        :param str : _
        :param str channels: channels[]
        :param str playlist_video: playlist_video
        :return: VideosGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'prioritize_featured', 'page', 'liked_by', 'viewed_by', 'priority', 'followed_by', 'playlists', '', 'channels', 'playlist_video']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'prioritize_featured' in params:
            query_params.append(('prioritize_featured', params['prioritize_featured']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'liked_by' in params:
            query_params.append(('liked_by', params['liked_by']))  # noqa: E501
        if 'viewed_by' in params:
            query_params.append(('viewed_by', params['viewed_by']))  # noqa: E501
        if 'followed_by' in params:
            query_params.append(('followed_by', params['followed_by']))  # noqa: E501
        if 'playlists' in params:
            query_params.append(('playlists[]', params['playlists']))  # noqa: E501
        if '' in params:
            query_params.append(('_', params['']))  # noqa: E501
        if 'channels' in params:
            query_params.append(('channels[]', params['channels']))  # noqa: E501
        if 'playlist_video' in params:
            query_params.append(('playlist_video', params['playlist_video']))  # noqa: E501

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_authors(self, **kwargs):  # noqa: E501
        """Get Videos Authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_authors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VideosAuthorsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_authors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_authors_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_videos_authors_with_http_info(self, **kwargs):  # noqa: E501
        """Get Videos Authors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_authors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VideosAuthorsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_authors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/authors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosAuthorsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_by_id(self, id, **kwargs):  # noqa: E501
        """Get Videos By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str include: include[]
        :return: VideosIDGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_videos_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Videos By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str include: include[]
        :return: VideosIDGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_videos_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include[]', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosIDGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_by_id_next(self, id, **kwargs):  # noqa: E501
        """Get Videos By ID Next  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_by_id_next(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str playlist: playlist
        :param str channel: channel
        :return: VideosIDNextGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_by_id_next_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_by_id_next_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_videos_by_id_next_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Videos By ID Next  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_by_id_next_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str playlist: playlist
        :param str channel: channel
        :return: VideosIDNextGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playlist', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_by_id_next" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_videos_by_id_next`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'playlist' in params:
            query_params.append(('playlist', params['playlist']))  # noqa: E501
        if 'channel' in params:
            query_params.append(('channel', params['channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/{id}/next', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosIDNextGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_channels(self, **kwargs):  # noqa: E501
        """Get Videos Channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_channels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page: page
        :param str order: order
        :return: VideosChannelsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_channels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_channels_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_videos_channels_with_http_info(self, **kwargs):  # noqa: E501
        """Get Videos Channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_channels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page: page
        :param str order: order
        :return: VideosChannelsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_channels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosChannelsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_clips(self, **kwargs):  # noqa: E501
        """Get Videos Clips  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_clips(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str video: video
        :param str limit: limit
        :param str order: order
        :param str page: page
        :return: VideosClipsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_clips_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_clips_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_videos_clips_with_http_info(self, **kwargs):  # noqa: E501
        """Get Videos Clips  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_clips_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str video: video
        :param str limit: limit
        :param str order: order
        :param str page: page
        :return: VideosClipsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['video', 'limit', 'order', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_clips" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video' in params:
            query_params.append(('video', params['video']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/clips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosClipsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_playlists(self, **kwargs):  # noqa: E501
        """Get Videos Playlists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_playlists(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: user
        :param str page: page
        :param str order: order
        :param str limit: limit
        :return: VideosPlaylistsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_playlists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_playlists_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_videos_playlists_with_http_info(self, **kwargs):  # noqa: E501
        """Get Videos Playlists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_playlists_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: user
        :param str page: page
        :param str order: order
        :param str limit: limit
        :return: VideosPlaylistsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'page', 'order', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_playlists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/playlists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosPlaylistsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_videos_playlists_by_id(self, id, **kwargs):  # noqa: E501
        """Get Videos Playlists By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_playlists_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VideosPlaylistsIDGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_videos_playlists_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_videos_playlists_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_videos_playlists_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Videos Playlists By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_videos_playlists_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VideosPlaylistsIDGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_videos_playlists_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_videos_playlists_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/playlists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosPlaylistsIDGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_videos_clips(self, body, **kwargs):  # noqa: E501
        """Post Videos Clips  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_videos_clips(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosClipsPostRequest body: (required)
        :param str priority: Priority
        :return: VideosClipsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_videos_clips_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_videos_clips_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_videos_clips_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Videos Clips  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_videos_clips_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosClipsPostRequest body: (required)
        :param str priority: Priority
        :return: VideosClipsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_videos_clips" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_videos_clips`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/clips', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosClipsPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_videos_playlists_by_id(self, body, id, **kwargs):  # noqa: E501
        """Post Videos Playlists By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_videos_playlists_by_id(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosPlaylistsIDPostRequest body: (required)
        :param int id: (required)
        :param str priority: Priority
        :return: VideosPlaylistsIDPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_videos_playlists_by_id_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_videos_playlists_by_id_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def post_videos_playlists_by_id_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Post Videos Playlists By ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_videos_playlists_by_id_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VideosPlaylistsIDPostRequest body: (required)
        :param int id: (required)
        :param str priority: Priority
        :return: VideosPlaylistsIDPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_videos_playlists_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_videos_playlists_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_videos_playlists_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/videos/playlists/{id}/videos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VideosPlaylistsIDPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

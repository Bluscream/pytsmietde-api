# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UtilityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_utility_follows(self, **kwargs):  # noqa: E501
        """Delete Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_utility_follows(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type
        :param str id: id
        :param str priority: Priority
        :return: UtilityFollowsDeleteRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_utility_follows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_utility_follows_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_utility_follows_with_http_info(self, **kwargs):  # noqa: E501
        """Delete Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_utility_follows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type
        :param str id: id
        :param str priority: Priority
        :return: UtilityFollowsDeleteRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'id', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_utility_follows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/follows', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityFollowsDeleteRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_utility_comments(self, **kwargs):  # noqa: E501
        """Get Utility Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_comments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order: order
        :param str id: id
        :param str type: type
        :param str page: page
        :param str limit: limit
        :param str include: include[]
        :param str order_own: order_own
        :param str : _
        :param str by_user: by_user
        :return: UtilityCommentsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_utility_comments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_utility_comments_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_utility_comments_with_http_info(self, **kwargs):  # noqa: E501
        """Get Utility Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_comments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order: order
        :param str id: id
        :param str type: type
        :param str page: page
        :param str limit: limit
        :param str include: include[]
        :param str order_own: order_own
        :param str : _
        :param str by_user: by_user
        :return: UtilityCommentsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order', 'id', 'type', 'page', 'limit', 'include', 'order_own', '', 'by_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_utility_comments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include[]', params['include']))  # noqa: E501
        if 'order_own' in params:
            query_params.append(('order_own', params['order_own']))  # noqa: E501
        if '' in params:
            query_params.append(('_', params['']))  # noqa: E501
        if 'by_user' in params:
            query_params.append(('by_user', params['by_user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityCommentsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_utility_follows(self, **kwargs):  # noqa: E501
        """Get Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_follows(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type
        :param str id: id
        :return: UtilityFollowsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_utility_follows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_utility_follows_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_utility_follows_with_http_info(self, **kwargs):  # noqa: E501
        """Get Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_follows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: type
        :param str id: id
        :return: UtilityFollowsGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_utility_follows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/follows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityFollowsGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_utility_player(self, **kwargs):  # noqa: E501
        """Get Utility Player  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_player(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str video: video
        :param str preset: preset
        :param str priority: Priority
        :return: UtilityPlayerGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_utility_player_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_utility_player_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_utility_player_with_http_info(self, **kwargs):  # noqa: E501
        """Get Utility Player  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_utility_player_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str video: video
        :param str preset: preset
        :param str priority: Priority
        :return: UtilityPlayerGetRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['video', 'preset', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_utility_player" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video' in params:
            query_params.append(('video', params['video']))  # noqa: E501
        if 'preset' in params:
            query_params.append(('preset', params['preset']))  # noqa: E501

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/player', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityPlayerGetRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utility_autobahn(self, body, **kwargs):  # noqa: E501
        """Post Utility Autobahn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_autobahn(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityAutobahnPostRequest body: (required)
        :return: UtilityAutobahnPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utility_autobahn_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_utility_autobahn_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_utility_autobahn_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Utility Autobahn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_autobahn_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityAutobahnPostRequest body: (required)
        :return: UtilityAutobahnPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utility_autobahn" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_utility_autobahn`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/autobahn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityAutobahnPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utility_comments(self, body, **kwargs):  # noqa: E501
        """Post Utility Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_comments(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityCommentsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityCommentsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utility_comments_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_utility_comments_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_utility_comments_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Utility Comments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_comments_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityCommentsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityCommentsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utility_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_utility_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityCommentsPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utility_comments_by_id_reports(self, id, **kwargs):  # noqa: E501
        """Post Utility Comments By ID Reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_comments_by_id_reports(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str priority: Priority
        :return: UtilityCommentsIDReportsPostRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utility_comments_by_id_reports_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_utility_comments_by_id_reports_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_utility_comments_by_id_reports_with_http_info(self, id, **kwargs):  # noqa: E501
        """Post Utility Comments By ID Reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_comments_by_id_reports_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str priority: Priority
        :return: UtilityCommentsIDReportsPostRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utility_comments_by_id_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_utility_comments_by_id_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/comments/{id}/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityCommentsIDReportsPostRequest',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utility_follows(self, body, **kwargs):  # noqa: E501
        """Post Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_follows(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityFollowsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityFollowsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utility_follows_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_utility_follows_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_utility_follows_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Utility Follows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_follows_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityFollowsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityFollowsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utility_follows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_utility_follows`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/follows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityFollowsPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_utility_highlights(self, body, **kwargs):  # noqa: E501
        """Post Utility Highlights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_highlights(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityHighlightsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityHighlightsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_utility_highlights_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_utility_highlights_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_utility_highlights_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Utility Highlights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_utility_highlights_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UtilityHighlightsPostRequest body: (required)
        :param str priority: Priority
        :return: UtilityHighlightsPostRequest1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'priority']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_utility_highlights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_utility_highlights`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'priority' in params:
            header_params['Priority'] = params['priority']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Origin-Integrity']  # noqa: E501

        return self.api_client.call_api(
            '/utility/highlights', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UtilityHighlightsPostRequest1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

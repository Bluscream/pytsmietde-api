# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Generic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analytics': 'Analytics',
        'autoplay': 'bool',
        'chromecast': 'Chromecast',
        'controls': 'bool',
        'loop': 'bool',
        'muted': 'bool',
        'playback_rates': 'list[float]'
    }

    attribute_map = {
        'analytics': 'analytics',
        'autoplay': 'autoplay',
        'chromecast': 'chromecast',
        'controls': 'controls',
        'loop': 'loop',
        'muted': 'muted',
        'playback_rates': 'playback_rates'
    }

    def __init__(self, analytics=None, autoplay=None, chromecast=None, controls=None, loop=None, muted=None, playback_rates=None):  # noqa: E501
        """Generic - a model defined in Swagger"""  # noqa: E501
        self._analytics = None
        self._autoplay = None
        self._chromecast = None
        self._controls = None
        self._loop = None
        self._muted = None
        self._playback_rates = None
        self.discriminator = None
        if analytics is not None:
            self.analytics = analytics
        if autoplay is not None:
            self.autoplay = autoplay
        if chromecast is not None:
            self.chromecast = chromecast
        if controls is not None:
            self.controls = controls
        if loop is not None:
            self.loop = loop
        if muted is not None:
            self.muted = muted
        if playback_rates is not None:
            self.playback_rates = playback_rates

    @property
    def analytics(self):
        """Gets the analytics of this Generic.  # noqa: E501


        :return: The analytics of this Generic.  # noqa: E501
        :rtype: Analytics
        """
        return self._analytics

    @analytics.setter
    def analytics(self, analytics):
        """Sets the analytics of this Generic.


        :param analytics: The analytics of this Generic.  # noqa: E501
        :type: Analytics
        """

        self._analytics = analytics

    @property
    def autoplay(self):
        """Gets the autoplay of this Generic.  # noqa: E501


        :return: The autoplay of this Generic.  # noqa: E501
        :rtype: bool
        """
        return self._autoplay

    @autoplay.setter
    def autoplay(self, autoplay):
        """Sets the autoplay of this Generic.


        :param autoplay: The autoplay of this Generic.  # noqa: E501
        :type: bool
        """

        self._autoplay = autoplay

    @property
    def chromecast(self):
        """Gets the chromecast of this Generic.  # noqa: E501


        :return: The chromecast of this Generic.  # noqa: E501
        :rtype: Chromecast
        """
        return self._chromecast

    @chromecast.setter
    def chromecast(self, chromecast):
        """Sets the chromecast of this Generic.


        :param chromecast: The chromecast of this Generic.  # noqa: E501
        :type: Chromecast
        """

        self._chromecast = chromecast

    @property
    def controls(self):
        """Gets the controls of this Generic.  # noqa: E501


        :return: The controls of this Generic.  # noqa: E501
        :rtype: bool
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this Generic.


        :param controls: The controls of this Generic.  # noqa: E501
        :type: bool
        """

        self._controls = controls

    @property
    def loop(self):
        """Gets the loop of this Generic.  # noqa: E501


        :return: The loop of this Generic.  # noqa: E501
        :rtype: bool
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this Generic.


        :param loop: The loop of this Generic.  # noqa: E501
        :type: bool
        """

        self._loop = loop

    @property
    def muted(self):
        """Gets the muted of this Generic.  # noqa: E501


        :return: The muted of this Generic.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Generic.


        :param muted: The muted of this Generic.  # noqa: E501
        :type: bool
        """

        self._muted = muted

    @property
    def playback_rates(self):
        """Gets the playback_rates of this Generic.  # noqa: E501


        :return: The playback_rates of this Generic.  # noqa: E501
        :rtype: list[float]
        """
        return self._playback_rates

    @playback_rates.setter
    def playback_rates(self, playback_rates):
        """Sets the playback_rates of this Generic.


        :param playback_rates: The playback_rates of this Generic.  # noqa: E501
        :type: list[float]
        """

        self._playback_rates = playback_rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Generic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Generic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'object',
        'external_url': 'object',
        'external_url_platform': 'object',
        'publish_date': 'datetime',
        'publish_date_secondary': 'datetime',
        'title': 'str',
        'type': 'int',
        'type_definition': 'TypeDefinition',
        'video': 'Video'
    }

    attribute_map = {
        'description': 'description',
        'external_url': 'external_url',
        'external_url_platform': 'external_url_platform',
        'publish_date': 'publish_date',
        'publish_date_secondary': 'publish_date_secondary',
        'title': 'title',
        'type': 'type',
        'type_definition': 'type_definition',
        'video': 'video'
    }

    def __init__(self, description=None, external_url=None, external_url_platform=None, publish_date=None, publish_date_secondary=None, title=None, type=None, type_definition=None, video=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._external_url = None
        self._external_url_platform = None
        self._publish_date = None
        self._publish_date_secondary = None
        self._title = None
        self._type = None
        self._type_definition = None
        self._video = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if external_url is not None:
            self.external_url = external_url
        if external_url_platform is not None:
            self.external_url_platform = external_url_platform
        if publish_date is not None:
            self.publish_date = publish_date
        if publish_date_secondary is not None:
            self.publish_date_secondary = publish_date_secondary
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if type_definition is not None:
            self.type_definition = type_definition
        if video is not None:
            self.video = video

    @property
    def description(self):
        """Gets the description of this Item.  # noqa: E501


        :return: The description of this Item.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.


        :param description: The description of this Item.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def external_url(self):
        """Gets the external_url of this Item.  # noqa: E501


        :return: The external_url of this Item.  # noqa: E501
        :rtype: object
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this Item.


        :param external_url: The external_url of this Item.  # noqa: E501
        :type: object
        """

        self._external_url = external_url

    @property
    def external_url_platform(self):
        """Gets the external_url_platform of this Item.  # noqa: E501


        :return: The external_url_platform of this Item.  # noqa: E501
        :rtype: object
        """
        return self._external_url_platform

    @external_url_platform.setter
    def external_url_platform(self, external_url_platform):
        """Sets the external_url_platform of this Item.


        :param external_url_platform: The external_url_platform of this Item.  # noqa: E501
        :type: object
        """

        self._external_url_platform = external_url_platform

    @property
    def publish_date(self):
        """Gets the publish_date of this Item.  # noqa: E501


        :return: The publish_date of this Item.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this Item.


        :param publish_date: The publish_date of this Item.  # noqa: E501
        :type: datetime
        """

        self._publish_date = publish_date

    @property
    def publish_date_secondary(self):
        """Gets the publish_date_secondary of this Item.  # noqa: E501


        :return: The publish_date_secondary of this Item.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_date_secondary

    @publish_date_secondary.setter
    def publish_date_secondary(self, publish_date_secondary):
        """Sets the publish_date_secondary of this Item.


        :param publish_date_secondary: The publish_date_secondary of this Item.  # noqa: E501
        :type: datetime
        """

        self._publish_date_secondary = publish_date_secondary

    @property
    def title(self):
        """Gets the title of this Item.  # noqa: E501


        :return: The title of this Item.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.


        :param title: The title of this Item.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Item.  # noqa: E501


        :return: The type of this Item.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Item.


        :param type: The type of this Item.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def type_definition(self):
        """Gets the type_definition of this Item.  # noqa: E501


        :return: The type_definition of this Item.  # noqa: E501
        :rtype: TypeDefinition
        """
        return self._type_definition

    @type_definition.setter
    def type_definition(self, type_definition):
        """Sets the type_definition of this Item.


        :param type_definition: The type_definition of this Item.  # noqa: E501
        :type: TypeDefinition
        """

        self._type_definition = type_definition

    @property
    def video(self):
        """Gets the video of this Item.  # noqa: E501


        :return: The video of this Item.  # noqa: E501
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Item.


        :param video: The video of this Item.  # noqa: E501
        :type: Video
        """

        self._video = video

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

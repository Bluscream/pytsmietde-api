# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar': 'AnyOfDatum9Avatar',
        'banner': 'AnyOfDatum9Banner',
        'description': 'AnyOfDatum9Description',
        'followings_count': 'object',
        'id': 'int',
        'name': 'str',
        'public_social_accounts': 'list[PublicSocialAccount]',
        'team': 'bool',
        'url_slug': 'str',
        'username': 'str',
        'videos_count': 'object'
    }

    attribute_map = {
        'avatar': 'avatar',
        'banner': 'banner',
        'description': 'description',
        'followings_count': 'followings_count',
        'id': 'id',
        'name': 'name',
        'public_social_accounts': 'public_social_accounts',
        'team': 'team',
        'url_slug': 'url_slug',
        'username': 'username',
        'videos_count': 'videos_count'
    }

    def __init__(self, avatar=None, banner=None, description=None, followings_count=None, id=None, name=None, public_social_accounts=None, team=None, url_slug=None, username=None, videos_count=None):  # noqa: E501
        """Datum9 - a model defined in Swagger"""  # noqa: E501
        self._avatar = None
        self._banner = None
        self._description = None
        self._followings_count = None
        self._id = None
        self._name = None
        self._public_social_accounts = None
        self._team = None
        self._url_slug = None
        self._username = None
        self._videos_count = None
        self.discriminator = None
        if avatar is not None:
            self.avatar = avatar
        if banner is not None:
            self.banner = banner
        if description is not None:
            self.description = description
        if followings_count is not None:
            self.followings_count = followings_count
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if public_social_accounts is not None:
            self.public_social_accounts = public_social_accounts
        if team is not None:
            self.team = team
        if url_slug is not None:
            self.url_slug = url_slug
        if username is not None:
            self.username = username
        if videos_count is not None:
            self.videos_count = videos_count

    @property
    def avatar(self):
        """Gets the avatar of this Datum9.  # noqa: E501


        :return: The avatar of this Datum9.  # noqa: E501
        :rtype: AnyOfDatum9Avatar
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Datum9.


        :param avatar: The avatar of this Datum9.  # noqa: E501
        :type: AnyOfDatum9Avatar
        """

        self._avatar = avatar

    @property
    def banner(self):
        """Gets the banner of this Datum9.  # noqa: E501


        :return: The banner of this Datum9.  # noqa: E501
        :rtype: AnyOfDatum9Banner
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this Datum9.


        :param banner: The banner of this Datum9.  # noqa: E501
        :type: AnyOfDatum9Banner
        """

        self._banner = banner

    @property
    def description(self):
        """Gets the description of this Datum9.  # noqa: E501


        :return: The description of this Datum9.  # noqa: E501
        :rtype: AnyOfDatum9Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datum9.


        :param description: The description of this Datum9.  # noqa: E501
        :type: AnyOfDatum9Description
        """

        self._description = description

    @property
    def followings_count(self):
        """Gets the followings_count of this Datum9.  # noqa: E501


        :return: The followings_count of this Datum9.  # noqa: E501
        :rtype: object
        """
        return self._followings_count

    @followings_count.setter
    def followings_count(self, followings_count):
        """Sets the followings_count of this Datum9.


        :param followings_count: The followings_count of this Datum9.  # noqa: E501
        :type: object
        """

        self._followings_count = followings_count

    @property
    def id(self):
        """Gets the id of this Datum9.  # noqa: E501


        :return: The id of this Datum9.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum9.


        :param id: The id of this Datum9.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Datum9.  # noqa: E501


        :return: The name of this Datum9.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Datum9.


        :param name: The name of this Datum9.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public_social_accounts(self):
        """Gets the public_social_accounts of this Datum9.  # noqa: E501


        :return: The public_social_accounts of this Datum9.  # noqa: E501
        :rtype: list[PublicSocialAccount]
        """
        return self._public_social_accounts

    @public_social_accounts.setter
    def public_social_accounts(self, public_social_accounts):
        """Sets the public_social_accounts of this Datum9.


        :param public_social_accounts: The public_social_accounts of this Datum9.  # noqa: E501
        :type: list[PublicSocialAccount]
        """

        self._public_social_accounts = public_social_accounts

    @property
    def team(self):
        """Gets the team of this Datum9.  # noqa: E501


        :return: The team of this Datum9.  # noqa: E501
        :rtype: bool
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Datum9.


        :param team: The team of this Datum9.  # noqa: E501
        :type: bool
        """

        self._team = team

    @property
    def url_slug(self):
        """Gets the url_slug of this Datum9.  # noqa: E501


        :return: The url_slug of this Datum9.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this Datum9.


        :param url_slug: The url_slug of this Datum9.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def username(self):
        """Gets the username of this Datum9.  # noqa: E501


        :return: The username of this Datum9.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Datum9.


        :param username: The username of this Datum9.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def videos_count(self):
        """Gets the videos_count of this Datum9.  # noqa: E501


        :return: The videos_count of this Datum9.  # noqa: E501
        :rtype: object
        """
        return self._videos_count

    @videos_count.setter
    def videos_count(self, videos_count):
        """Sets the videos_count of this Datum9.


        :param videos_count: The videos_count of this Datum9.  # noqa: E501
        :type: object
        """

        self._videos_count = videos_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum9, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_bg': 'str',
        'color_text': 'str',
        'created_at': 'datetime',
        'is_closed': 'bool',
        'name': 'str',
        'reason': 'object',
        'title': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'color_bg': 'color_bg',
        'color_text': 'color_text',
        'created_at': 'created_at',
        'is_closed': 'is_closed',
        'name': 'name',
        'reason': 'reason',
        'title': 'title',
        'updated_at': 'updated_at'
    }

    def __init__(self, color_bg=None, color_text=None, created_at=None, is_closed=None, name=None, reason=None, title=None, updated_at=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._color_bg = None
        self._color_text = None
        self._created_at = None
        self._is_closed = None
        self._name = None
        self._reason = None
        self._title = None
        self._updated_at = None
        self.discriminator = None
        if color_bg is not None:
            self.color_bg = color_bg
        if color_text is not None:
            self.color_text = color_text
        if created_at is not None:
            self.created_at = created_at
        if is_closed is not None:
            self.is_closed = is_closed
        if name is not None:
            self.name = name
        if reason is not None:
            self.reason = reason
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def color_bg(self):
        """Gets the color_bg of this Status.  # noqa: E501


        :return: The color_bg of this Status.  # noqa: E501
        :rtype: str
        """
        return self._color_bg

    @color_bg.setter
    def color_bg(self, color_bg):
        """Sets the color_bg of this Status.


        :param color_bg: The color_bg of this Status.  # noqa: E501
        :type: str
        """

        self._color_bg = color_bg

    @property
    def color_text(self):
        """Gets the color_text of this Status.  # noqa: E501


        :return: The color_text of this Status.  # noqa: E501
        :rtype: str
        """
        return self._color_text

    @color_text.setter
    def color_text(self, color_text):
        """Sets the color_text of this Status.


        :param color_text: The color_text of this Status.  # noqa: E501
        :type: str
        """

        self._color_text = color_text

    @property
    def created_at(self):
        """Gets the created_at of this Status.  # noqa: E501


        :return: The created_at of this Status.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Status.


        :param created_at: The created_at of this Status.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def is_closed(self):
        """Gets the is_closed of this Status.  # noqa: E501


        :return: The is_closed of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Status.


        :param is_closed: The is_closed of this Status.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def name(self):
        """Gets the name of this Status.  # noqa: E501


        :return: The name of this Status.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Status.


        :param name: The name of this Status.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this Status.  # noqa: E501


        :return: The reason of this Status.  # noqa: E501
        :rtype: object
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Status.


        :param reason: The reason of this Status.  # noqa: E501
        :type: object
        """

        self._reason = reason

    @property
    def title(self):
        """Gets the title of this Status.  # noqa: E501


        :return: The title of this Status.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Status.


        :param title: The title of this Status.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Status.  # noqa: E501


        :return: The updated_at of this Status.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Status.


        :param updated_at: The updated_at of this Status.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

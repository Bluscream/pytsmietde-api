# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum19(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'datetime',
        'id': 'str',
        'pending': 'bool',
        'status': 'str',
        'status_color': 'str',
        'status_description': 'str',
        'total': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'id': 'id',
        'pending': 'pending',
        'status': 'status',
        'status_color': 'status_color',
        'status_description': 'status_description',
        'total': 'total'
    }

    def __init__(self, _date=None, id=None, pending=None, status=None, status_color=None, status_description=None, total=None):  # noqa: E501
        """Datum19 - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._id = None
        self._pending = None
        self._status = None
        self._status_color = None
        self._status_description = None
        self._total = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if id is not None:
            self.id = id
        if pending is not None:
            self.pending = pending
        if status is not None:
            self.status = status
        if status_color is not None:
            self.status_color = status_color
        if status_description is not None:
            self.status_description = status_description
        if total is not None:
            self.total = total

    @property
    def _date(self):
        """Gets the _date of this Datum19.  # noqa: E501


        :return: The _date of this Datum19.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Datum19.


        :param _date: The _date of this Datum19.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this Datum19.  # noqa: E501


        :return: The id of this Datum19.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum19.


        :param id: The id of this Datum19.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pending(self):
        """Gets the pending of this Datum19.  # noqa: E501


        :return: The pending of this Datum19.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Datum19.


        :param pending: The pending of this Datum19.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def status(self):
        """Gets the status of this Datum19.  # noqa: E501


        :return: The status of this Datum19.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Datum19.


        :param status: The status of this Datum19.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_color(self):
        """Gets the status_color of this Datum19.  # noqa: E501


        :return: The status_color of this Datum19.  # noqa: E501
        :rtype: str
        """
        return self._status_color

    @status_color.setter
    def status_color(self, status_color):
        """Sets the status_color of this Datum19.


        :param status_color: The status_color of this Datum19.  # noqa: E501
        :type: str
        """

        self._status_color = status_color

    @property
    def status_description(self):
        """Gets the status_description of this Datum19.  # noqa: E501


        :return: The status_description of this Datum19.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this Datum19.


        :param status_description: The status_description of this Datum19.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    @property
    def total(self):
        """Gets the total of this Datum19.  # noqa: E501


        :return: The total of this Datum19.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Datum19.


        :param total: The total of this Datum19.  # noqa: E501
        :type: str
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum19, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum19):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

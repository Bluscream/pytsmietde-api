# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum18(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        '_date': 'date',
        'description': 'str',
        'full': 'bool',
        'id': 'int',
        'intro': 'object',
        'items': 'list[Item]',
        'thumbnail': 'Thumbnail',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        '_date': 'date',
        'description': 'description',
        'full': 'full',
        'id': 'id',
        'intro': 'intro',
        'items': 'items',
        'thumbnail': 'thumbnail',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, _date=None, description=None, full=None, id=None, intro=None, items=None, thumbnail=None, updated_at=None):  # noqa: E501
        """Datum18 - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self.__date = None
        self._description = None
        self._full = None
        self._id = None
        self._intro = None
        self._items = None
        self._thumbnail = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if full is not None:
            self.full = full
        if id is not None:
            self.id = id
        if intro is not None:
            self.intro = intro
        if items is not None:
            self.items = items
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Datum18.  # noqa: E501


        :return: The created_at of this Datum18.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Datum18.


        :param created_at: The created_at of this Datum18.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def _date(self):
        """Gets the _date of this Datum18.  # noqa: E501


        :return: The _date of this Datum18.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Datum18.


        :param _date: The _date of this Datum18.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Datum18.  # noqa: E501


        :return: The description of this Datum18.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datum18.


        :param description: The description of this Datum18.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def full(self):
        """Gets the full of this Datum18.  # noqa: E501


        :return: The full of this Datum18.  # noqa: E501
        :rtype: bool
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this Datum18.


        :param full: The full of this Datum18.  # noqa: E501
        :type: bool
        """

        self._full = full

    @property
    def id(self):
        """Gets the id of this Datum18.  # noqa: E501


        :return: The id of this Datum18.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum18.


        :param id: The id of this Datum18.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def intro(self):
        """Gets the intro of this Datum18.  # noqa: E501


        :return: The intro of this Datum18.  # noqa: E501
        :rtype: object
        """
        return self._intro

    @intro.setter
    def intro(self, intro):
        """Sets the intro of this Datum18.


        :param intro: The intro of this Datum18.  # noqa: E501
        :type: object
        """

        self._intro = intro

    @property
    def items(self):
        """Gets the items of this Datum18.  # noqa: E501


        :return: The items of this Datum18.  # noqa: E501
        :rtype: list[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Datum18.


        :param items: The items of this Datum18.  # noqa: E501
        :type: list[Item]
        """

        self._items = items

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Datum18.  # noqa: E501


        :return: The thumbnail of this Datum18.  # noqa: E501
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Datum18.


        :param thumbnail: The thumbnail of this Datum18.  # noqa: E501
        :type: Thumbnail
        """

        self._thumbnail = thumbnail

    @property
    def updated_at(self):
        """Gets the updated_at of this Datum18.  # noqa: E501


        :return: The updated_at of this Datum18.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Datum18.


        :param updated_at: The updated_at of this Datum18.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum18, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum18):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

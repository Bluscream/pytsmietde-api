# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum13(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments_count': 'int',
        'created_at': 'datetime',
        'description': 'str',
        'description_raw': 'str',
        'dislikes_count': 'int',
        'id': 'int',
        'likes_count': 'int',
        'participant_count': 'AnyOfDatum13ParticipantCount',
        'participant_lineup': 'AnyOfDatum13ParticipantLineup',
        'participant_lineup_description': 'str',
        'referring_to': 'AnyOfDatum13ReferringTo',
        'slug': 'str',
        'status': 'Status',
        'title': 'str',
        'type': 'int',
        'type_description': 'str',
        'updated_at': 'datetime',
        'url': 'AnyOfDatum13Url',
        'url_domain': 'AnyOfDatum13UrlDomain',
        'url_slug': 'str',
        'user': 'User',
        'voteable': 'bool'
    }

    attribute_map = {
        'comments_count': 'comments_count',
        'created_at': 'created_at',
        'description': 'description',
        'description_raw': 'description_raw',
        'dislikes_count': 'dislikes_count',
        'id': 'id',
        'likes_count': 'likes_count',
        'participant_count': 'participant_count',
        'participant_lineup': 'participant_lineup',
        'participant_lineup_description': 'participant_lineup_description',
        'referring_to': 'referring_to',
        'slug': 'slug',
        'status': 'status',
        'title': 'title',
        'type': 'type',
        'type_description': 'type_description',
        'updated_at': 'updated_at',
        'url': 'url',
        'url_domain': 'url_domain',
        'url_slug': 'url_slug',
        'user': 'user',
        'voteable': 'voteable'
    }

    def __init__(self, comments_count=None, created_at=None, description=None, description_raw=None, dislikes_count=None, id=None, likes_count=None, participant_count=None, participant_lineup=None, participant_lineup_description=None, referring_to=None, slug=None, status=None, title=None, type=None, type_description=None, updated_at=None, url=None, url_domain=None, url_slug=None, user=None, voteable=None):  # noqa: E501
        """Datum13 - a model defined in Swagger"""  # noqa: E501
        self._comments_count = None
        self._created_at = None
        self._description = None
        self._description_raw = None
        self._dislikes_count = None
        self._id = None
        self._likes_count = None
        self._participant_count = None
        self._participant_lineup = None
        self._participant_lineup_description = None
        self._referring_to = None
        self._slug = None
        self._status = None
        self._title = None
        self._type = None
        self._type_description = None
        self._updated_at = None
        self._url = None
        self._url_domain = None
        self._url_slug = None
        self._user = None
        self._voteable = None
        self.discriminator = None
        if comments_count is not None:
            self.comments_count = comments_count
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if description_raw is not None:
            self.description_raw = description_raw
        if dislikes_count is not None:
            self.dislikes_count = dislikes_count
        if id is not None:
            self.id = id
        if likes_count is not None:
            self.likes_count = likes_count
        if participant_count is not None:
            self.participant_count = participant_count
        if participant_lineup is not None:
            self.participant_lineup = participant_lineup
        if participant_lineup_description is not None:
            self.participant_lineup_description = participant_lineup_description
        if referring_to is not None:
            self.referring_to = referring_to
        if slug is not None:
            self.slug = slug
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if type_description is not None:
            self.type_description = type_description
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url
        if url_domain is not None:
            self.url_domain = url_domain
        if url_slug is not None:
            self.url_slug = url_slug
        if user is not None:
            self.user = user
        if voteable is not None:
            self.voteable = voteable

    @property
    def comments_count(self):
        """Gets the comments_count of this Datum13.  # noqa: E501


        :return: The comments_count of this Datum13.  # noqa: E501
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count):
        """Sets the comments_count of this Datum13.


        :param comments_count: The comments_count of this Datum13.  # noqa: E501
        :type: int
        """

        self._comments_count = comments_count

    @property
    def created_at(self):
        """Gets the created_at of this Datum13.  # noqa: E501


        :return: The created_at of this Datum13.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Datum13.


        :param created_at: The created_at of this Datum13.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Datum13.  # noqa: E501


        :return: The description of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datum13.


        :param description: The description of this Datum13.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_raw(self):
        """Gets the description_raw of this Datum13.  # noqa: E501


        :return: The description_raw of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._description_raw

    @description_raw.setter
    def description_raw(self, description_raw):
        """Sets the description_raw of this Datum13.


        :param description_raw: The description_raw of this Datum13.  # noqa: E501
        :type: str
        """

        self._description_raw = description_raw

    @property
    def dislikes_count(self):
        """Gets the dislikes_count of this Datum13.  # noqa: E501


        :return: The dislikes_count of this Datum13.  # noqa: E501
        :rtype: int
        """
        return self._dislikes_count

    @dislikes_count.setter
    def dislikes_count(self, dislikes_count):
        """Sets the dislikes_count of this Datum13.


        :param dislikes_count: The dislikes_count of this Datum13.  # noqa: E501
        :type: int
        """

        self._dislikes_count = dislikes_count

    @property
    def id(self):
        """Gets the id of this Datum13.  # noqa: E501


        :return: The id of this Datum13.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum13.


        :param id: The id of this Datum13.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def likes_count(self):
        """Gets the likes_count of this Datum13.  # noqa: E501


        :return: The likes_count of this Datum13.  # noqa: E501
        :rtype: int
        """
        return self._likes_count

    @likes_count.setter
    def likes_count(self, likes_count):
        """Sets the likes_count of this Datum13.


        :param likes_count: The likes_count of this Datum13.  # noqa: E501
        :type: int
        """

        self._likes_count = likes_count

    @property
    def participant_count(self):
        """Gets the participant_count of this Datum13.  # noqa: E501


        :return: The participant_count of this Datum13.  # noqa: E501
        :rtype: AnyOfDatum13ParticipantCount
        """
        return self._participant_count

    @participant_count.setter
    def participant_count(self, participant_count):
        """Sets the participant_count of this Datum13.


        :param participant_count: The participant_count of this Datum13.  # noqa: E501
        :type: AnyOfDatum13ParticipantCount
        """

        self._participant_count = participant_count

    @property
    def participant_lineup(self):
        """Gets the participant_lineup of this Datum13.  # noqa: E501


        :return: The participant_lineup of this Datum13.  # noqa: E501
        :rtype: AnyOfDatum13ParticipantLineup
        """
        return self._participant_lineup

    @participant_lineup.setter
    def participant_lineup(self, participant_lineup):
        """Sets the participant_lineup of this Datum13.


        :param participant_lineup: The participant_lineup of this Datum13.  # noqa: E501
        :type: AnyOfDatum13ParticipantLineup
        """

        self._participant_lineup = participant_lineup

    @property
    def participant_lineup_description(self):
        """Gets the participant_lineup_description of this Datum13.  # noqa: E501


        :return: The participant_lineup_description of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._participant_lineup_description

    @participant_lineup_description.setter
    def participant_lineup_description(self, participant_lineup_description):
        """Sets the participant_lineup_description of this Datum13.


        :param participant_lineup_description: The participant_lineup_description of this Datum13.  # noqa: E501
        :type: str
        """

        self._participant_lineup_description = participant_lineup_description

    @property
    def referring_to(self):
        """Gets the referring_to of this Datum13.  # noqa: E501


        :return: The referring_to of this Datum13.  # noqa: E501
        :rtype: AnyOfDatum13ReferringTo
        """
        return self._referring_to

    @referring_to.setter
    def referring_to(self, referring_to):
        """Sets the referring_to of this Datum13.


        :param referring_to: The referring_to of this Datum13.  # noqa: E501
        :type: AnyOfDatum13ReferringTo
        """

        self._referring_to = referring_to

    @property
    def slug(self):
        """Gets the slug of this Datum13.  # noqa: E501


        :return: The slug of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Datum13.


        :param slug: The slug of this Datum13.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this Datum13.  # noqa: E501


        :return: The status of this Datum13.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Datum13.


        :param status: The status of this Datum13.  # noqa: E501
        :type: Status
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Datum13.  # noqa: E501


        :return: The title of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Datum13.


        :param title: The title of this Datum13.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Datum13.  # noqa: E501


        :return: The type of this Datum13.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Datum13.


        :param type: The type of this Datum13.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def type_description(self):
        """Gets the type_description of this Datum13.  # noqa: E501


        :return: The type_description of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._type_description

    @type_description.setter
    def type_description(self, type_description):
        """Sets the type_description of this Datum13.


        :param type_description: The type_description of this Datum13.  # noqa: E501
        :type: str
        """

        self._type_description = type_description

    @property
    def updated_at(self):
        """Gets the updated_at of this Datum13.  # noqa: E501


        :return: The updated_at of this Datum13.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Datum13.


        :param updated_at: The updated_at of this Datum13.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this Datum13.  # noqa: E501


        :return: The url of this Datum13.  # noqa: E501
        :rtype: AnyOfDatum13Url
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Datum13.


        :param url: The url of this Datum13.  # noqa: E501
        :type: AnyOfDatum13Url
        """

        self._url = url

    @property
    def url_domain(self):
        """Gets the url_domain of this Datum13.  # noqa: E501


        :return: The url_domain of this Datum13.  # noqa: E501
        :rtype: AnyOfDatum13UrlDomain
        """
        return self._url_domain

    @url_domain.setter
    def url_domain(self, url_domain):
        """Sets the url_domain of this Datum13.


        :param url_domain: The url_domain of this Datum13.  # noqa: E501
        :type: AnyOfDatum13UrlDomain
        """

        self._url_domain = url_domain

    @property
    def url_slug(self):
        """Gets the url_slug of this Datum13.  # noqa: E501


        :return: The url_slug of this Datum13.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this Datum13.


        :param url_slug: The url_slug of this Datum13.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def user(self):
        """Gets the user of this Datum13.  # noqa: E501


        :return: The user of this Datum13.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Datum13.


        :param user: The user of this Datum13.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def voteable(self):
        """Gets the voteable of this Datum13.  # noqa: E501


        :return: The voteable of this Datum13.  # noqa: E501
        :rtype: bool
        """
        return self._voteable

    @voteable.setter
    def voteable(self, voteable):
        """Sets the voteable of this Datum13.


        :param voteable: The voteable of this Datum13.  # noqa: E501
        :type: bool
        """

        self._voteable = voteable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum13, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum13):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

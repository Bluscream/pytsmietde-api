# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notifiable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blocked': 'bool',
        'created_at': 'datetime',
        'description': 'object',
        'id': 'int',
        'name': 'str',
        'name_possessive': 'str',
        'preferences': 'Preferences1',
        'public_profile': 'bool',
        'reputation': 'int',
        'reputation_pretty': 'str',
        'team': 'bool',
        'updated_at': 'datetime',
        'url_slug': 'str',
        'username': 'str'
    }

    attribute_map = {
        'blocked': 'blocked',
        'created_at': 'created_at',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'name_possessive': 'name_possessive',
        'preferences': 'preferences',
        'public_profile': 'public_profile',
        'reputation': 'reputation',
        'reputation_pretty': 'reputation_pretty',
        'team': 'team',
        'updated_at': 'updated_at',
        'url_slug': 'url_slug',
        'username': 'username'
    }

    def __init__(self, blocked=None, created_at=None, description=None, id=None, name=None, name_possessive=None, preferences=None, public_profile=None, reputation=None, reputation_pretty=None, team=None, updated_at=None, url_slug=None, username=None):  # noqa: E501
        """Notifiable - a model defined in Swagger"""  # noqa: E501
        self._blocked = None
        self._created_at = None
        self._description = None
        self._id = None
        self._name = None
        self._name_possessive = None
        self._preferences = None
        self._public_profile = None
        self._reputation = None
        self._reputation_pretty = None
        self._team = None
        self._updated_at = None
        self._url_slug = None
        self._username = None
        self.discriminator = None
        if blocked is not None:
            self.blocked = blocked
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if name_possessive is not None:
            self.name_possessive = name_possessive
        if preferences is not None:
            self.preferences = preferences
        if public_profile is not None:
            self.public_profile = public_profile
        if reputation is not None:
            self.reputation = reputation
        if reputation_pretty is not None:
            self.reputation_pretty = reputation_pretty
        if team is not None:
            self.team = team
        if updated_at is not None:
            self.updated_at = updated_at
        if url_slug is not None:
            self.url_slug = url_slug
        if username is not None:
            self.username = username

    @property
    def blocked(self):
        """Gets the blocked of this Notifiable.  # noqa: E501


        :return: The blocked of this Notifiable.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this Notifiable.


        :param blocked: The blocked of this Notifiable.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def created_at(self):
        """Gets the created_at of this Notifiable.  # noqa: E501


        :return: The created_at of this Notifiable.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notifiable.


        :param created_at: The created_at of this Notifiable.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Notifiable.  # noqa: E501


        :return: The description of this Notifiable.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Notifiable.


        :param description: The description of this Notifiable.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Notifiable.  # noqa: E501


        :return: The id of this Notifiable.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notifiable.


        :param id: The id of this Notifiable.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Notifiable.  # noqa: E501


        :return: The name of this Notifiable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Notifiable.


        :param name: The name of this Notifiable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_possessive(self):
        """Gets the name_possessive of this Notifiable.  # noqa: E501


        :return: The name_possessive of this Notifiable.  # noqa: E501
        :rtype: str
        """
        return self._name_possessive

    @name_possessive.setter
    def name_possessive(self, name_possessive):
        """Sets the name_possessive of this Notifiable.


        :param name_possessive: The name_possessive of this Notifiable.  # noqa: E501
        :type: str
        """

        self._name_possessive = name_possessive

    @property
    def preferences(self):
        """Gets the preferences of this Notifiable.  # noqa: E501


        :return: The preferences of this Notifiable.  # noqa: E501
        :rtype: Preferences1
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this Notifiable.


        :param preferences: The preferences of this Notifiable.  # noqa: E501
        :type: Preferences1
        """

        self._preferences = preferences

    @property
    def public_profile(self):
        """Gets the public_profile of this Notifiable.  # noqa: E501


        :return: The public_profile of this Notifiable.  # noqa: E501
        :rtype: bool
        """
        return self._public_profile

    @public_profile.setter
    def public_profile(self, public_profile):
        """Sets the public_profile of this Notifiable.


        :param public_profile: The public_profile of this Notifiable.  # noqa: E501
        :type: bool
        """

        self._public_profile = public_profile

    @property
    def reputation(self):
        """Gets the reputation of this Notifiable.  # noqa: E501


        :return: The reputation of this Notifiable.  # noqa: E501
        :rtype: int
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this Notifiable.


        :param reputation: The reputation of this Notifiable.  # noqa: E501
        :type: int
        """

        self._reputation = reputation

    @property
    def reputation_pretty(self):
        """Gets the reputation_pretty of this Notifiable.  # noqa: E501


        :return: The reputation_pretty of this Notifiable.  # noqa: E501
        :rtype: str
        """
        return self._reputation_pretty

    @reputation_pretty.setter
    def reputation_pretty(self, reputation_pretty):
        """Sets the reputation_pretty of this Notifiable.


        :param reputation_pretty: The reputation_pretty of this Notifiable.  # noqa: E501
        :type: str
        """

        self._reputation_pretty = reputation_pretty

    @property
    def team(self):
        """Gets the team of this Notifiable.  # noqa: E501


        :return: The team of this Notifiable.  # noqa: E501
        :rtype: bool
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Notifiable.


        :param team: The team of this Notifiable.  # noqa: E501
        :type: bool
        """

        self._team = team

    @property
    def updated_at(self):
        """Gets the updated_at of this Notifiable.  # noqa: E501


        :return: The updated_at of this Notifiable.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Notifiable.


        :param updated_at: The updated_at of this Notifiable.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def url_slug(self):
        """Gets the url_slug of this Notifiable.  # noqa: E501


        :return: The url_slug of this Notifiable.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this Notifiable.


        :param url_slug: The url_slug of this Notifiable.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def username(self):
        """Gets the username of this Notifiable.  # noqa: E501


        :return: The username of this Notifiable.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Notifiable.


        :param username: The username of this Notifiable.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notifiable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notifiable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

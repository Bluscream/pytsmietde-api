# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Counts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'articles': 'int',
        'channels': 'int',
        'playlists': 'int',
        'podcasts': 'int',
        'suggestions': 'int',
        'tags': 'int',
        'videos': 'int'
    }

    attribute_map = {
        'articles': 'articles',
        'channels': 'channels',
        'playlists': 'playlists',
        'podcasts': 'podcasts',
        'suggestions': 'suggestions',
        'tags': 'tags',
        'videos': 'videos'
    }

    def __init__(self, articles=None, channels=None, playlists=None, podcasts=None, suggestions=None, tags=None, videos=None):  # noqa: E501
        """Counts - a model defined in Swagger"""  # noqa: E501
        self._articles = None
        self._channels = None
        self._playlists = None
        self._podcasts = None
        self._suggestions = None
        self._tags = None
        self._videos = None
        self.discriminator = None
        if articles is not None:
            self.articles = articles
        if channels is not None:
            self.channels = channels
        if playlists is not None:
            self.playlists = playlists
        if podcasts is not None:
            self.podcasts = podcasts
        if suggestions is not None:
            self.suggestions = suggestions
        if tags is not None:
            self.tags = tags
        if videos is not None:
            self.videos = videos

    @property
    def articles(self):
        """Gets the articles of this Counts.  # noqa: E501


        :return: The articles of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this Counts.


        :param articles: The articles of this Counts.  # noqa: E501
        :type: int
        """

        self._articles = articles

    @property
    def channels(self):
        """Gets the channels of this Counts.  # noqa: E501


        :return: The channels of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Counts.


        :param channels: The channels of this Counts.  # noqa: E501
        :type: int
        """

        self._channels = channels

    @property
    def playlists(self):
        """Gets the playlists of this Counts.  # noqa: E501


        :return: The playlists of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists):
        """Sets the playlists of this Counts.


        :param playlists: The playlists of this Counts.  # noqa: E501
        :type: int
        """

        self._playlists = playlists

    @property
    def podcasts(self):
        """Gets the podcasts of this Counts.  # noqa: E501


        :return: The podcasts of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._podcasts

    @podcasts.setter
    def podcasts(self, podcasts):
        """Sets the podcasts of this Counts.


        :param podcasts: The podcasts of this Counts.  # noqa: E501
        :type: int
        """

        self._podcasts = podcasts

    @property
    def suggestions(self):
        """Gets the suggestions of this Counts.  # noqa: E501


        :return: The suggestions of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this Counts.


        :param suggestions: The suggestions of this Counts.  # noqa: E501
        :type: int
        """

        self._suggestions = suggestions

    @property
    def tags(self):
        """Gets the tags of this Counts.  # noqa: E501


        :return: The tags of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Counts.


        :param tags: The tags of this Counts.  # noqa: E501
        :type: int
        """

        self._tags = tags

    @property
    def videos(self):
        """Gets the videos of this Counts.  # noqa: E501


        :return: The videos of this Counts.  # noqa: E501
        :rtype: int
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this Counts.


        :param videos: The videos of this Counts.  # noqa: E501
        :type: int
        """

        self._videos = videos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Counts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Counts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

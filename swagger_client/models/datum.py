# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'int',
        'created_at': 'datetime',
        'expires_at': 'datetime',
        'id': 'str',
        'ip': 'object',
        'last_seen': 'object',
        'name': 'object',
        'revoked': 'bool',
        'scopes': 'list[object]',
        'tfa_verified_at': 'object',
        'ua': 'object',
        'ua_browser': 'object',
        'ua_device': 'object',
        'ua_os': 'object',
        'updated_at': 'datetime',
        'user_id': 'int'
    }

    attribute_map = {
        'client_id': 'client_id',
        'created_at': 'created_at',
        'expires_at': 'expires_at',
        'id': 'id',
        'ip': 'ip',
        'last_seen': 'last_seen',
        'name': 'name',
        'revoked': 'revoked',
        'scopes': 'scopes',
        'tfa_verified_at': 'tfa_verified_at',
        'ua': 'ua',
        'ua_browser': 'ua_browser',
        'ua_device': 'ua_device',
        'ua_os': 'ua_os',
        'updated_at': 'updated_at',
        'user_id': 'user_id'
    }

    def __init__(self, client_id=None, created_at=None, expires_at=None, id=None, ip=None, last_seen=None, name=None, revoked=None, scopes=None, tfa_verified_at=None, ua=None, ua_browser=None, ua_device=None, ua_os=None, updated_at=None, user_id=None):  # noqa: E501
        """Datum - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._created_at = None
        self._expires_at = None
        self._id = None
        self._ip = None
        self._last_seen = None
        self._name = None
        self._revoked = None
        self._scopes = None
        self._tfa_verified_at = None
        self._ua = None
        self._ua_browser = None
        self._ua_device = None
        self._ua_os = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if created_at is not None:
            self.created_at = created_at
        if expires_at is not None:
            self.expires_at = expires_at
        if id is not None:
            self.id = id
        if ip is not None:
            self.ip = ip
        if last_seen is not None:
            self.last_seen = last_seen
        if name is not None:
            self.name = name
        if revoked is not None:
            self.revoked = revoked
        if scopes is not None:
            self.scopes = scopes
        if tfa_verified_at is not None:
            self.tfa_verified_at = tfa_verified_at
        if ua is not None:
            self.ua = ua
        if ua_browser is not None:
            self.ua_browser = ua_browser
        if ua_device is not None:
            self.ua_device = ua_device
        if ua_os is not None:
            self.ua_os = ua_os
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def client_id(self):
        """Gets the client_id of this Datum.  # noqa: E501


        :return: The client_id of this Datum.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Datum.


        :param client_id: The client_id of this Datum.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def created_at(self):
        """Gets the created_at of this Datum.  # noqa: E501


        :return: The created_at of this Datum.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Datum.


        :param created_at: The created_at of this Datum.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this Datum.  # noqa: E501


        :return: The expires_at of this Datum.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Datum.


        :param expires_at: The expires_at of this Datum.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this Datum.  # noqa: E501


        :return: The id of this Datum.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum.


        :param id: The id of this Datum.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this Datum.  # noqa: E501


        :return: The ip of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Datum.


        :param ip: The ip of this Datum.  # noqa: E501
        :type: object
        """

        self._ip = ip

    @property
    def last_seen(self):
        """Gets the last_seen of this Datum.  # noqa: E501


        :return: The last_seen of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Datum.


        :param last_seen: The last_seen of this Datum.  # noqa: E501
        :type: object
        """

        self._last_seen = last_seen

    @property
    def name(self):
        """Gets the name of this Datum.  # noqa: E501


        :return: The name of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Datum.


        :param name: The name of this Datum.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def revoked(self):
        """Gets the revoked of this Datum.  # noqa: E501


        :return: The revoked of this Datum.  # noqa: E501
        :rtype: bool
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """Sets the revoked of this Datum.


        :param revoked: The revoked of this Datum.  # noqa: E501
        :type: bool
        """

        self._revoked = revoked

    @property
    def scopes(self):
        """Gets the scopes of this Datum.  # noqa: E501


        :return: The scopes of this Datum.  # noqa: E501
        :rtype: list[object]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Datum.


        :param scopes: The scopes of this Datum.  # noqa: E501
        :type: list[object]
        """

        self._scopes = scopes

    @property
    def tfa_verified_at(self):
        """Gets the tfa_verified_at of this Datum.  # noqa: E501


        :return: The tfa_verified_at of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._tfa_verified_at

    @tfa_verified_at.setter
    def tfa_verified_at(self, tfa_verified_at):
        """Sets the tfa_verified_at of this Datum.


        :param tfa_verified_at: The tfa_verified_at of this Datum.  # noqa: E501
        :type: object
        """

        self._tfa_verified_at = tfa_verified_at

    @property
    def ua(self):
        """Gets the ua of this Datum.  # noqa: E501


        :return: The ua of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._ua

    @ua.setter
    def ua(self, ua):
        """Sets the ua of this Datum.


        :param ua: The ua of this Datum.  # noqa: E501
        :type: object
        """

        self._ua = ua

    @property
    def ua_browser(self):
        """Gets the ua_browser of this Datum.  # noqa: E501


        :return: The ua_browser of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._ua_browser

    @ua_browser.setter
    def ua_browser(self, ua_browser):
        """Sets the ua_browser of this Datum.


        :param ua_browser: The ua_browser of this Datum.  # noqa: E501
        :type: object
        """

        self._ua_browser = ua_browser

    @property
    def ua_device(self):
        """Gets the ua_device of this Datum.  # noqa: E501


        :return: The ua_device of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._ua_device

    @ua_device.setter
    def ua_device(self, ua_device):
        """Sets the ua_device of this Datum.


        :param ua_device: The ua_device of this Datum.  # noqa: E501
        :type: object
        """

        self._ua_device = ua_device

    @property
    def ua_os(self):
        """Gets the ua_os of this Datum.  # noqa: E501


        :return: The ua_os of this Datum.  # noqa: E501
        :rtype: object
        """
        return self._ua_os

    @ua_os.setter
    def ua_os(self, ua_os):
        """Sets the ua_os of this Datum.


        :param ua_os: The ua_os of this Datum.  # noqa: E501
        :type: object
        """

        self._ua_os = ua_os

    @property
    def updated_at(self):
        """Gets the updated_at of this Datum.  # noqa: E501


        :return: The updated_at of this Datum.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Datum.


        :param updated_at: The updated_at of this Datum.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this Datum.  # noqa: E501


        :return: The user_id of this Datum.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Datum.


        :param user_id: The user_id of this Datum.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'object',
        'first_video': 'FirstVideo',
        'followings_count': 'int',
        'id': 'int',
        'slug': 'str',
        'thumbnail': 'object',
        'title': 'str',
        'url_slug': 'str',
        'videos_count': 'int'
    }

    attribute_map = {
        'description': 'description',
        'first_video': 'first_video',
        'followings_count': 'followings_count',
        'id': 'id',
        'slug': 'slug',
        'thumbnail': 'thumbnail',
        'title': 'title',
        'url_slug': 'url_slug',
        'videos_count': 'videos_count'
    }

    def __init__(self, description=None, first_video=None, followings_count=None, id=None, slug=None, thumbnail=None, title=None, url_slug=None, videos_count=None):  # noqa: E501
        """Datum2 - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._first_video = None
        self._followings_count = None
        self._id = None
        self._slug = None
        self._thumbnail = None
        self._title = None
        self._url_slug = None
        self._videos_count = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if first_video is not None:
            self.first_video = first_video
        if followings_count is not None:
            self.followings_count = followings_count
        if id is not None:
            self.id = id
        if slug is not None:
            self.slug = slug
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if title is not None:
            self.title = title
        if url_slug is not None:
            self.url_slug = url_slug
        if videos_count is not None:
            self.videos_count = videos_count

    @property
    def description(self):
        """Gets the description of this Datum2.  # noqa: E501


        :return: The description of this Datum2.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Datum2.


        :param description: The description of this Datum2.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def first_video(self):
        """Gets the first_video of this Datum2.  # noqa: E501


        :return: The first_video of this Datum2.  # noqa: E501
        :rtype: FirstVideo
        """
        return self._first_video

    @first_video.setter
    def first_video(self, first_video):
        """Sets the first_video of this Datum2.


        :param first_video: The first_video of this Datum2.  # noqa: E501
        :type: FirstVideo
        """

        self._first_video = first_video

    @property
    def followings_count(self):
        """Gets the followings_count of this Datum2.  # noqa: E501


        :return: The followings_count of this Datum2.  # noqa: E501
        :rtype: int
        """
        return self._followings_count

    @followings_count.setter
    def followings_count(self, followings_count):
        """Sets the followings_count of this Datum2.


        :param followings_count: The followings_count of this Datum2.  # noqa: E501
        :type: int
        """

        self._followings_count = followings_count

    @property
    def id(self):
        """Gets the id of this Datum2.  # noqa: E501


        :return: The id of this Datum2.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum2.


        :param id: The id of this Datum2.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Datum2.  # noqa: E501


        :return: The slug of this Datum2.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Datum2.


        :param slug: The slug of this Datum2.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Datum2.  # noqa: E501


        :return: The thumbnail of this Datum2.  # noqa: E501
        :rtype: object
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Datum2.


        :param thumbnail: The thumbnail of this Datum2.  # noqa: E501
        :type: object
        """

        self._thumbnail = thumbnail

    @property
    def title(self):
        """Gets the title of this Datum2.  # noqa: E501


        :return: The title of this Datum2.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Datum2.


        :param title: The title of this Datum2.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url_slug(self):
        """Gets the url_slug of this Datum2.  # noqa: E501


        :return: The url_slug of this Datum2.  # noqa: E501
        :rtype: str
        """
        return self._url_slug

    @url_slug.setter
    def url_slug(self, url_slug):
        """Sets the url_slug of this Datum2.


        :param url_slug: The url_slug of this Datum2.  # noqa: E501
        :type: str
        """

        self._url_slug = url_slug

    @property
    def videos_count(self):
        """Gets the videos_count of this Datum2.  # noqa: E501


        :return: The videos_count of this Datum2.  # noqa: E501
        :rtype: int
        """
        return self._videos_count

    @videos_count.setter
    def videos_count(self, videos_count):
        """Sets the videos_count of this Datum2.


        :param videos_count: The videos_count of this Datum2.  # noqa: E501
        :type: int
        """

        self._videos_count = videos_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Discount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'current_billing_cycle': 'int',
        'id': 'str',
        'name': 'str',
        'never_expires': 'bool',
        'number_of_billing_cycles': 'object',
        'quantity': 'int'
    }

    attribute_map = {
        'amount': 'amount',
        'current_billing_cycle': 'current_billing_cycle',
        'id': 'id',
        'name': 'name',
        'never_expires': 'never_expires',
        'number_of_billing_cycles': 'number_of_billing_cycles',
        'quantity': 'quantity'
    }

    def __init__(self, amount=None, current_billing_cycle=None, id=None, name=None, never_expires=None, number_of_billing_cycles=None, quantity=None):  # noqa: E501
        """Discount - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._current_billing_cycle = None
        self._id = None
        self._name = None
        self._never_expires = None
        self._number_of_billing_cycles = None
        self._quantity = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if current_billing_cycle is not None:
            self.current_billing_cycle = current_billing_cycle
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if never_expires is not None:
            self.never_expires = never_expires
        if number_of_billing_cycles is not None:
            self.number_of_billing_cycles = number_of_billing_cycles
        if quantity is not None:
            self.quantity = quantity

    @property
    def amount(self):
        """Gets the amount of this Discount.  # noqa: E501


        :return: The amount of this Discount.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Discount.


        :param amount: The amount of this Discount.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def current_billing_cycle(self):
        """Gets the current_billing_cycle of this Discount.  # noqa: E501


        :return: The current_billing_cycle of this Discount.  # noqa: E501
        :rtype: int
        """
        return self._current_billing_cycle

    @current_billing_cycle.setter
    def current_billing_cycle(self, current_billing_cycle):
        """Sets the current_billing_cycle of this Discount.


        :param current_billing_cycle: The current_billing_cycle of this Discount.  # noqa: E501
        :type: int
        """

        self._current_billing_cycle = current_billing_cycle

    @property
    def id(self):
        """Gets the id of this Discount.  # noqa: E501


        :return: The id of this Discount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Discount.


        :param id: The id of this Discount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Discount.  # noqa: E501


        :return: The name of this Discount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Discount.


        :param name: The name of this Discount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def never_expires(self):
        """Gets the never_expires of this Discount.  # noqa: E501


        :return: The never_expires of this Discount.  # noqa: E501
        :rtype: bool
        """
        return self._never_expires

    @never_expires.setter
    def never_expires(self, never_expires):
        """Sets the never_expires of this Discount.


        :param never_expires: The never_expires of this Discount.  # noqa: E501
        :type: bool
        """

        self._never_expires = never_expires

    @property
    def number_of_billing_cycles(self):
        """Gets the number_of_billing_cycles of this Discount.  # noqa: E501


        :return: The number_of_billing_cycles of this Discount.  # noqa: E501
        :rtype: object
        """
        return self._number_of_billing_cycles

    @number_of_billing_cycles.setter
    def number_of_billing_cycles(self, number_of_billing_cycles):
        """Sets the number_of_billing_cycles of this Discount.


        :param number_of_billing_cycles: The number_of_billing_cycles of this Discount.  # noqa: E501
        :type: object
        """

        self._number_of_billing_cycles = number_of_billing_cycles

    @property
    def quantity(self):
        """Gets the quantity of this Discount.  # noqa: E501


        :return: The quantity of this Discount.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Discount.


        :param quantity: The quantity of this Discount.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Discount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Discount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

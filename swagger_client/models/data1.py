# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Data1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latest_articles': 'list[LatestArticle]',
        'latest_playlists': 'list[LatestPlaylist]',
        'latest_podcasts': 'list[LatestPodcast]',
        'latest_videos': 'list[LatestVideo]',
        'schedules': 'list[Schedule]',
        'top_users': 'list[TopUser]',
        'trending_videos': 'list[TrendingVideo]',
        'upcoming_schedules': 'list[object]'
    }

    attribute_map = {
        'latest_articles': 'latestArticles',
        'latest_playlists': 'latestPlaylists',
        'latest_podcasts': 'latestPodcasts',
        'latest_videos': 'latestVideos',
        'schedules': 'schedules',
        'top_users': 'topUsers',
        'trending_videos': 'trendingVideos',
        'upcoming_schedules': 'upcomingSchedules'
    }

    def __init__(self, latest_articles=None, latest_playlists=None, latest_podcasts=None, latest_videos=None, schedules=None, top_users=None, trending_videos=None, upcoming_schedules=None):  # noqa: E501
        """Data1 - a model defined in Swagger"""  # noqa: E501
        self._latest_articles = None
        self._latest_playlists = None
        self._latest_podcasts = None
        self._latest_videos = None
        self._schedules = None
        self._top_users = None
        self._trending_videos = None
        self._upcoming_schedules = None
        self.discriminator = None
        if latest_articles is not None:
            self.latest_articles = latest_articles
        if latest_playlists is not None:
            self.latest_playlists = latest_playlists
        if latest_podcasts is not None:
            self.latest_podcasts = latest_podcasts
        if latest_videos is not None:
            self.latest_videos = latest_videos
        if schedules is not None:
            self.schedules = schedules
        if top_users is not None:
            self.top_users = top_users
        if trending_videos is not None:
            self.trending_videos = trending_videos
        if upcoming_schedules is not None:
            self.upcoming_schedules = upcoming_schedules

    @property
    def latest_articles(self):
        """Gets the latest_articles of this Data1.  # noqa: E501


        :return: The latest_articles of this Data1.  # noqa: E501
        :rtype: list[LatestArticle]
        """
        return self._latest_articles

    @latest_articles.setter
    def latest_articles(self, latest_articles):
        """Sets the latest_articles of this Data1.


        :param latest_articles: The latest_articles of this Data1.  # noqa: E501
        :type: list[LatestArticle]
        """

        self._latest_articles = latest_articles

    @property
    def latest_playlists(self):
        """Gets the latest_playlists of this Data1.  # noqa: E501


        :return: The latest_playlists of this Data1.  # noqa: E501
        :rtype: list[LatestPlaylist]
        """
        return self._latest_playlists

    @latest_playlists.setter
    def latest_playlists(self, latest_playlists):
        """Sets the latest_playlists of this Data1.


        :param latest_playlists: The latest_playlists of this Data1.  # noqa: E501
        :type: list[LatestPlaylist]
        """

        self._latest_playlists = latest_playlists

    @property
    def latest_podcasts(self):
        """Gets the latest_podcasts of this Data1.  # noqa: E501


        :return: The latest_podcasts of this Data1.  # noqa: E501
        :rtype: list[LatestPodcast]
        """
        return self._latest_podcasts

    @latest_podcasts.setter
    def latest_podcasts(self, latest_podcasts):
        """Sets the latest_podcasts of this Data1.


        :param latest_podcasts: The latest_podcasts of this Data1.  # noqa: E501
        :type: list[LatestPodcast]
        """

        self._latest_podcasts = latest_podcasts

    @property
    def latest_videos(self):
        """Gets the latest_videos of this Data1.  # noqa: E501


        :return: The latest_videos of this Data1.  # noqa: E501
        :rtype: list[LatestVideo]
        """
        return self._latest_videos

    @latest_videos.setter
    def latest_videos(self, latest_videos):
        """Sets the latest_videos of this Data1.


        :param latest_videos: The latest_videos of this Data1.  # noqa: E501
        :type: list[LatestVideo]
        """

        self._latest_videos = latest_videos

    @property
    def schedules(self):
        """Gets the schedules of this Data1.  # noqa: E501


        :return: The schedules of this Data1.  # noqa: E501
        :rtype: list[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this Data1.


        :param schedules: The schedules of this Data1.  # noqa: E501
        :type: list[Schedule]
        """

        self._schedules = schedules

    @property
    def top_users(self):
        """Gets the top_users of this Data1.  # noqa: E501


        :return: The top_users of this Data1.  # noqa: E501
        :rtype: list[TopUser]
        """
        return self._top_users

    @top_users.setter
    def top_users(self, top_users):
        """Sets the top_users of this Data1.


        :param top_users: The top_users of this Data1.  # noqa: E501
        :type: list[TopUser]
        """

        self._top_users = top_users

    @property
    def trending_videos(self):
        """Gets the trending_videos of this Data1.  # noqa: E501


        :return: The trending_videos of this Data1.  # noqa: E501
        :rtype: list[TrendingVideo]
        """
        return self._trending_videos

    @trending_videos.setter
    def trending_videos(self, trending_videos):
        """Sets the trending_videos of this Data1.


        :param trending_videos: The trending_videos of this Data1.  # noqa: E501
        :type: list[TrendingVideo]
        """

        self._trending_videos = trending_videos

    @property
    def upcoming_schedules(self):
        """Gets the upcoming_schedules of this Data1.  # noqa: E501


        :return: The upcoming_schedules of this Data1.  # noqa: E501
        :rtype: list[object]
        """
        return self._upcoming_schedules

    @upcoming_schedules.setter
    def upcoming_schedules(self, upcoming_schedules):
        """Sets the upcoming_schedules of this Data1.


        :param upcoming_schedules: The upcoming_schedules of this Data1.  # noqa: E501
        :type: list[object]
        """

        self._upcoming_schedules = upcoming_schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Data1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

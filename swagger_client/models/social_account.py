# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SocialAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'external_url': 'str',
        'id': 'int',
        'name': 'str',
        'service': 'str',
        'service_definition': 'ServiceDefinition1',
        'social_id': 'str',
        'updated_at': 'datetime',
        'username': 'str'
    }

    attribute_map = {
        'created_at': 'created_at',
        'external_url': 'external_url',
        'id': 'id',
        'name': 'name',
        'service': 'service',
        'service_definition': 'service_definition',
        'social_id': 'social_id',
        'updated_at': 'updated_at',
        'username': 'username'
    }

    def __init__(self, created_at=None, external_url=None, id=None, name=None, service=None, service_definition=None, social_id=None, updated_at=None, username=None):  # noqa: E501
        """SocialAccount - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._external_url = None
        self._id = None
        self._name = None
        self._service = None
        self._service_definition = None
        self._social_id = None
        self._updated_at = None
        self._username = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if external_url is not None:
            self.external_url = external_url
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if service is not None:
            self.service = service
        if service_definition is not None:
            self.service_definition = service_definition
        if social_id is not None:
            self.social_id = social_id
        if updated_at is not None:
            self.updated_at = updated_at
        if username is not None:
            self.username = username

    @property
    def created_at(self):
        """Gets the created_at of this SocialAccount.  # noqa: E501


        :return: The created_at of this SocialAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SocialAccount.


        :param created_at: The created_at of this SocialAccount.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def external_url(self):
        """Gets the external_url of this SocialAccount.  # noqa: E501


        :return: The external_url of this SocialAccount.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this SocialAccount.


        :param external_url: The external_url of this SocialAccount.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def id(self):
        """Gets the id of this SocialAccount.  # noqa: E501


        :return: The id of this SocialAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SocialAccount.


        :param id: The id of this SocialAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SocialAccount.  # noqa: E501


        :return: The name of this SocialAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SocialAccount.


        :param name: The name of this SocialAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service(self):
        """Gets the service of this SocialAccount.  # noqa: E501


        :return: The service of this SocialAccount.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this SocialAccount.


        :param service: The service of this SocialAccount.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def service_definition(self):
        """Gets the service_definition of this SocialAccount.  # noqa: E501


        :return: The service_definition of this SocialAccount.  # noqa: E501
        :rtype: ServiceDefinition1
        """
        return self._service_definition

    @service_definition.setter
    def service_definition(self, service_definition):
        """Sets the service_definition of this SocialAccount.


        :param service_definition: The service_definition of this SocialAccount.  # noqa: E501
        :type: ServiceDefinition1
        """

        self._service_definition = service_definition

    @property
    def social_id(self):
        """Gets the social_id of this SocialAccount.  # noqa: E501


        :return: The social_id of this SocialAccount.  # noqa: E501
        :rtype: str
        """
        return self._social_id

    @social_id.setter
    def social_id(self, social_id):
        """Sets the social_id of this SocialAccount.


        :param social_id: The social_id of this SocialAccount.  # noqa: E501
        :type: str
        """

        self._social_id = social_id

    @property
    def updated_at(self):
        """Gets the updated_at of this SocialAccount.  # noqa: E501


        :return: The updated_at of this SocialAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SocialAccount.


        :param updated_at: The updated_at of this SocialAccount.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this SocialAccount.  # noqa: E501


        :return: The username of this SocialAccount.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SocialAccount.


        :param username: The username of this SocialAccount.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SocialAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SocialAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

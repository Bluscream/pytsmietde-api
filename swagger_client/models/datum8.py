# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Datum8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'dislikes_count': 'int',
        'id': 'int',
        'likes_count': 'int',
        'slug': 'str',
        'taggable_id': 'int',
        'taggable_type': 'str',
        'title': 'str',
        'total': 'int',
        'updated_at': 'datetime',
        'user': 'User'
    }

    attribute_map = {
        'created_at': 'created_at',
        'dislikes_count': 'dislikes_count',
        'id': 'id',
        'likes_count': 'likes_count',
        'slug': 'slug',
        'taggable_id': 'taggable_id',
        'taggable_type': 'taggable_type',
        'title': 'title',
        'total': 'total',
        'updated_at': 'updated_at',
        'user': 'user'
    }

    def __init__(self, created_at=None, dislikes_count=None, id=None, likes_count=None, slug=None, taggable_id=None, taggable_type=None, title=None, total=None, updated_at=None, user=None):  # noqa: E501
        """Datum8 - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._dislikes_count = None
        self._id = None
        self._likes_count = None
        self._slug = None
        self._taggable_id = None
        self._taggable_type = None
        self._title = None
        self._total = None
        self._updated_at = None
        self._user = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if dislikes_count is not None:
            self.dislikes_count = dislikes_count
        if id is not None:
            self.id = id
        if likes_count is not None:
            self.likes_count = likes_count
        if slug is not None:
            self.slug = slug
        if taggable_id is not None:
            self.taggable_id = taggable_id
        if taggable_type is not None:
            self.taggable_type = taggable_type
        if title is not None:
            self.title = title
        if total is not None:
            self.total = total
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user

    @property
    def created_at(self):
        """Gets the created_at of this Datum8.  # noqa: E501


        :return: The created_at of this Datum8.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Datum8.


        :param created_at: The created_at of this Datum8.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def dislikes_count(self):
        """Gets the dislikes_count of this Datum8.  # noqa: E501


        :return: The dislikes_count of this Datum8.  # noqa: E501
        :rtype: int
        """
        return self._dislikes_count

    @dislikes_count.setter
    def dislikes_count(self, dislikes_count):
        """Sets the dislikes_count of this Datum8.


        :param dislikes_count: The dislikes_count of this Datum8.  # noqa: E501
        :type: int
        """

        self._dislikes_count = dislikes_count

    @property
    def id(self):
        """Gets the id of this Datum8.  # noqa: E501


        :return: The id of this Datum8.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datum8.


        :param id: The id of this Datum8.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def likes_count(self):
        """Gets the likes_count of this Datum8.  # noqa: E501


        :return: The likes_count of this Datum8.  # noqa: E501
        :rtype: int
        """
        return self._likes_count

    @likes_count.setter
    def likes_count(self, likes_count):
        """Sets the likes_count of this Datum8.


        :param likes_count: The likes_count of this Datum8.  # noqa: E501
        :type: int
        """

        self._likes_count = likes_count

    @property
    def slug(self):
        """Gets the slug of this Datum8.  # noqa: E501


        :return: The slug of this Datum8.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Datum8.


        :param slug: The slug of this Datum8.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def taggable_id(self):
        """Gets the taggable_id of this Datum8.  # noqa: E501


        :return: The taggable_id of this Datum8.  # noqa: E501
        :rtype: int
        """
        return self._taggable_id

    @taggable_id.setter
    def taggable_id(self, taggable_id):
        """Sets the taggable_id of this Datum8.


        :param taggable_id: The taggable_id of this Datum8.  # noqa: E501
        :type: int
        """

        self._taggable_id = taggable_id

    @property
    def taggable_type(self):
        """Gets the taggable_type of this Datum8.  # noqa: E501


        :return: The taggable_type of this Datum8.  # noqa: E501
        :rtype: str
        """
        return self._taggable_type

    @taggable_type.setter
    def taggable_type(self, taggable_type):
        """Sets the taggable_type of this Datum8.


        :param taggable_type: The taggable_type of this Datum8.  # noqa: E501
        :type: str
        """
        allowed_values = ["video"]  # noqa: E501
        if taggable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `taggable_type` ({0}), must be one of {1}"  # noqa: E501
                .format(taggable_type, allowed_values)
            )

        self._taggable_type = taggable_type

    @property
    def title(self):
        """Gets the title of this Datum8.  # noqa: E501


        :return: The title of this Datum8.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Datum8.


        :param title: The title of this Datum8.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def total(self):
        """Gets the total of this Datum8.  # noqa: E501


        :return: The total of this Datum8.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Datum8.


        :param total: The total of this Datum8.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def updated_at(self):
        """Gets the updated_at of this Datum8.  # noqa: E501


        :return: The updated_at of this Datum8.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Datum8.


        :param updated_at: The updated_at of this Datum8.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Datum8.  # noqa: E501


        :return: The user of this Datum8.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Datum8.


        :param user: The user of this Datum8.  # noqa: E501
        :type: User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datum8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datum8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

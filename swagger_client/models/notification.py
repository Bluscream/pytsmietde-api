# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'data': 'Data',
        'id': 'str',
        'notifiable': 'Notifiable',
        'notifiable_id': 'int',
        'notifiable_type': 'str',
        'read': 'bool',
        'read_at': 'datetime',
        'type': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        'data': 'data',
        'id': 'id',
        'notifiable': 'notifiable',
        'notifiable_id': 'notifiable_id',
        'notifiable_type': 'notifiable_type',
        'read': 'read',
        'read_at': 'read_at',
        'type': 'type',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, data=None, id=None, notifiable=None, notifiable_id=None, notifiable_type=None, read=None, read_at=None, type=None, updated_at=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._data = None
        self._id = None
        self._notifiable = None
        self._notifiable_id = None
        self._notifiable_type = None
        self._read = None
        self._read_at = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if notifiable is not None:
            self.notifiable = notifiable
        if notifiable_id is not None:
            self.notifiable_id = notifiable_id
        if notifiable_type is not None:
            self.notifiable_type = notifiable_type
        if read is not None:
            self.read = read
        if read_at is not None:
            self.read_at = read_at
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501


        :return: The created_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.


        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data(self):
        """Gets the data of this Notification.  # noqa: E501


        :return: The data of this Notification.  # noqa: E501
        :rtype: Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Notification.


        :param data: The data of this Notification.  # noqa: E501
        :type: Data
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def notifiable(self):
        """Gets the notifiable of this Notification.  # noqa: E501


        :return: The notifiable of this Notification.  # noqa: E501
        :rtype: Notifiable
        """
        return self._notifiable

    @notifiable.setter
    def notifiable(self, notifiable):
        """Sets the notifiable of this Notification.


        :param notifiable: The notifiable of this Notification.  # noqa: E501
        :type: Notifiable
        """

        self._notifiable = notifiable

    @property
    def notifiable_id(self):
        """Gets the notifiable_id of this Notification.  # noqa: E501


        :return: The notifiable_id of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._notifiable_id

    @notifiable_id.setter
    def notifiable_id(self, notifiable_id):
        """Sets the notifiable_id of this Notification.


        :param notifiable_id: The notifiable_id of this Notification.  # noqa: E501
        :type: int
        """

        self._notifiable_id = notifiable_id

    @property
    def notifiable_type(self):
        """Gets the notifiable_type of this Notification.  # noqa: E501


        :return: The notifiable_type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notifiable_type

    @notifiable_type.setter
    def notifiable_type(self, notifiable_type):
        """Sets the notifiable_type of this Notification.


        :param notifiable_type: The notifiable_type of this Notification.  # noqa: E501
        :type: str
        """

        self._notifiable_type = notifiable_type

    @property
    def read(self):
        """Gets the read of this Notification.  # noqa: E501


        :return: The read of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Notification.


        :param read: The read of this Notification.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def read_at(self):
        """Gets the read_at of this Notification.  # noqa: E501


        :return: The read_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._read_at

    @read_at.setter
    def read_at(self, read_at):
        """Sets the read_at of this Notification.


        :param read_at: The read_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._read_at = read_at

    @property
    def type(self):
        """Gets the type of this Notification.  # noqa: E501


        :return: The type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.


        :param type: The type of this Notification.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Notification.  # noqa: E501


        :return: The updated_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Notification.


        :param updated_at: The updated_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

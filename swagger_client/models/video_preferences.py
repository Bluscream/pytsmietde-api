# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VideoPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clips': 'bool',
        'comments': 'bool',
        'likes': 'bool',
        'shares': 'bool',
        'tags': 'bool'
    }

    attribute_map = {
        'clips': 'clips',
        'comments': 'comments',
        'likes': 'likes',
        'shares': 'shares',
        'tags': 'tags'
    }

    def __init__(self, clips=None, comments=None, likes=None, shares=None, tags=None):  # noqa: E501
        """VideoPreferences - a model defined in Swagger"""  # noqa: E501
        self._clips = None
        self._comments = None
        self._likes = None
        self._shares = None
        self._tags = None
        self.discriminator = None
        if clips is not None:
            self.clips = clips
        if comments is not None:
            self.comments = comments
        if likes is not None:
            self.likes = likes
        if shares is not None:
            self.shares = shares
        if tags is not None:
            self.tags = tags

    @property
    def clips(self):
        """Gets the clips of this VideoPreferences.  # noqa: E501


        :return: The clips of this VideoPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._clips

    @clips.setter
    def clips(self, clips):
        """Sets the clips of this VideoPreferences.


        :param clips: The clips of this VideoPreferences.  # noqa: E501
        :type: bool
        """

        self._clips = clips

    @property
    def comments(self):
        """Gets the comments of this VideoPreferences.  # noqa: E501


        :return: The comments of this VideoPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VideoPreferences.


        :param comments: The comments of this VideoPreferences.  # noqa: E501
        :type: bool
        """

        self._comments = comments

    @property
    def likes(self):
        """Gets the likes of this VideoPreferences.  # noqa: E501


        :return: The likes of this VideoPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this VideoPreferences.


        :param likes: The likes of this VideoPreferences.  # noqa: E501
        :type: bool
        """

        self._likes = likes

    @property
    def shares(self):
        """Gets the shares of this VideoPreferences.  # noqa: E501


        :return: The shares of this VideoPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this VideoPreferences.


        :param shares: The shares of this VideoPreferences.  # noqa: E501
        :type: bool
        """

        self._shares = shares

    @property
    def tags(self):
        """Gets the tags of this VideoPreferences.  # noqa: E501


        :return: The tags of this VideoPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VideoPreferences.


        :param tags: The tags of this VideoPreferences.  # noqa: E501
        :type: bool
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VideoPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

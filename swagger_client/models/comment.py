# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Comment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved': 'bool',
        'count_replies': 'int',
        'created_at': 'datetime',
        'dislikes_count': 'int',
        'id': 'int',
        'is_reply': 'bool',
        'likes_count': 'int',
        'pinned': 'object',
        'reply': 'int',
        'subject': 'Subject1',
        'text': 'str',
        'timestamp': 'int',
        'user': 'User2'
    }

    attribute_map = {
        'approved': 'approved',
        'count_replies': 'count_replies',
        'created_at': 'created_at',
        'dislikes_count': 'dislikes_count',
        'id': 'id',
        'is_reply': 'is_reply',
        'likes_count': 'likes_count',
        'pinned': 'pinned',
        'reply': 'reply',
        'subject': 'subject',
        'text': 'text',
        'timestamp': 'timestamp',
        'user': 'user'
    }

    def __init__(self, approved=None, count_replies=None, created_at=None, dislikes_count=None, id=None, is_reply=None, likes_count=None, pinned=None, reply=None, subject=None, text=None, timestamp=None, user=None):  # noqa: E501
        """Comment - a model defined in Swagger"""  # noqa: E501
        self._approved = None
        self._count_replies = None
        self._created_at = None
        self._dislikes_count = None
        self._id = None
        self._is_reply = None
        self._likes_count = None
        self._pinned = None
        self._reply = None
        self._subject = None
        self._text = None
        self._timestamp = None
        self._user = None
        self.discriminator = None
        if approved is not None:
            self.approved = approved
        if count_replies is not None:
            self.count_replies = count_replies
        if created_at is not None:
            self.created_at = created_at
        if dislikes_count is not None:
            self.dislikes_count = dislikes_count
        if id is not None:
            self.id = id
        if is_reply is not None:
            self.is_reply = is_reply
        if likes_count is not None:
            self.likes_count = likes_count
        if pinned is not None:
            self.pinned = pinned
        if reply is not None:
            self.reply = reply
        if subject is not None:
            self.subject = subject
        if text is not None:
            self.text = text
        if timestamp is not None:
            self.timestamp = timestamp
        if user is not None:
            self.user = user

    @property
    def approved(self):
        """Gets the approved of this Comment.  # noqa: E501


        :return: The approved of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Comment.


        :param approved: The approved of this Comment.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def count_replies(self):
        """Gets the count_replies of this Comment.  # noqa: E501


        :return: The count_replies of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._count_replies

    @count_replies.setter
    def count_replies(self, count_replies):
        """Sets the count_replies of this Comment.


        :param count_replies: The count_replies of this Comment.  # noqa: E501
        :type: int
        """

        self._count_replies = count_replies

    @property
    def created_at(self):
        """Gets the created_at of this Comment.  # noqa: E501


        :return: The created_at of this Comment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.


        :param created_at: The created_at of this Comment.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def dislikes_count(self):
        """Gets the dislikes_count of this Comment.  # noqa: E501


        :return: The dislikes_count of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._dislikes_count

    @dislikes_count.setter
    def dislikes_count(self, dislikes_count):
        """Sets the dislikes_count of this Comment.


        :param dislikes_count: The dislikes_count of this Comment.  # noqa: E501
        :type: int
        """

        self._dislikes_count = dislikes_count

    @property
    def id(self):
        """Gets the id of this Comment.  # noqa: E501


        :return: The id of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.


        :param id: The id of this Comment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_reply(self):
        """Gets the is_reply of this Comment.  # noqa: E501


        :return: The is_reply of this Comment.  # noqa: E501
        :rtype: bool
        """
        return self._is_reply

    @is_reply.setter
    def is_reply(self, is_reply):
        """Sets the is_reply of this Comment.


        :param is_reply: The is_reply of this Comment.  # noqa: E501
        :type: bool
        """

        self._is_reply = is_reply

    @property
    def likes_count(self):
        """Gets the likes_count of this Comment.  # noqa: E501


        :return: The likes_count of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._likes_count

    @likes_count.setter
    def likes_count(self, likes_count):
        """Sets the likes_count of this Comment.


        :param likes_count: The likes_count of this Comment.  # noqa: E501
        :type: int
        """

        self._likes_count = likes_count

    @property
    def pinned(self):
        """Gets the pinned of this Comment.  # noqa: E501


        :return: The pinned of this Comment.  # noqa: E501
        :rtype: object
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Comment.


        :param pinned: The pinned of this Comment.  # noqa: E501
        :type: object
        """

        self._pinned = pinned

    @property
    def reply(self):
        """Gets the reply of this Comment.  # noqa: E501


        :return: The reply of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._reply

    @reply.setter
    def reply(self, reply):
        """Sets the reply of this Comment.


        :param reply: The reply of this Comment.  # noqa: E501
        :type: int
        """

        self._reply = reply

    @property
    def subject(self):
        """Gets the subject of this Comment.  # noqa: E501


        :return: The subject of this Comment.  # noqa: E501
        :rtype: Subject1
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Comment.


        :param subject: The subject of this Comment.  # noqa: E501
        :type: Subject1
        """

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this Comment.  # noqa: E501


        :return: The text of this Comment.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Comment.


        :param text: The text of this Comment.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this Comment.  # noqa: E501


        :return: The timestamp of this Comment.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Comment.


        :param timestamp: The timestamp of this Comment.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this Comment.  # noqa: E501


        :return: The user of this Comment.  # noqa: E501
        :rtype: User2
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.


        :param user: The user of this Comment.  # noqa: E501
        :type: User2
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

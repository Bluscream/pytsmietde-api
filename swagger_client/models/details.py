# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'details': 'list[Detail]',
        'perks': 'list[Detail]',
        'sub_title': 'str',
        'support_perks': 'list[SupportPerk]',
        'title': 'str'
    }

    attribute_map = {
        'color': 'color',
        'details': 'details',
        'perks': 'perks',
        'sub_title': 'sub_title',
        'support_perks': 'support_perks',
        'title': 'title'
    }

    def __init__(self, color=None, details=None, perks=None, sub_title=None, support_perks=None, title=None):  # noqa: E501
        """Details - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._details = None
        self._perks = None
        self._sub_title = None
        self._support_perks = None
        self._title = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if details is not None:
            self.details = details
        if perks is not None:
            self.perks = perks
        if sub_title is not None:
            self.sub_title = sub_title
        if support_perks is not None:
            self.support_perks = support_perks
        if title is not None:
            self.title = title

    @property
    def color(self):
        """Gets the color of this Details.  # noqa: E501


        :return: The color of this Details.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Details.


        :param color: The color of this Details.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def details(self):
        """Gets the details of this Details.  # noqa: E501


        :return: The details of this Details.  # noqa: E501
        :rtype: list[Detail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Details.


        :param details: The details of this Details.  # noqa: E501
        :type: list[Detail]
        """

        self._details = details

    @property
    def perks(self):
        """Gets the perks of this Details.  # noqa: E501


        :return: The perks of this Details.  # noqa: E501
        :rtype: list[Detail]
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this Details.


        :param perks: The perks of this Details.  # noqa: E501
        :type: list[Detail]
        """

        self._perks = perks

    @property
    def sub_title(self):
        """Gets the sub_title of this Details.  # noqa: E501


        :return: The sub_title of this Details.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this Details.


        :param sub_title: The sub_title of this Details.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def support_perks(self):
        """Gets the support_perks of this Details.  # noqa: E501


        :return: The support_perks of this Details.  # noqa: E501
        :rtype: list[SupportPerk]
        """
        return self._support_perks

    @support_perks.setter
    def support_perks(self, support_perks):
        """Sets the support_perks of this Details.


        :param support_perks: The support_perks of this Details.  # noqa: E501
        :type: list[SupportPerk]
        """

        self._support_perks = support_perks

    @property
    def title(self):
        """Gets the title of this Details.  # noqa: E501


        :return: The title of this Details.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Details.


        :param title: The title of this Details.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Clip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'duration': 'int',
        'duration_pretty': 'str',
        'finished': 'object',
        'id': 'int',
        'slug': 'str',
        'time_end': 'float',
        'time_start': 'float',
        'title': 'object',
        'updated_at': 'datetime',
        'video': 'Video'
    }

    attribute_map = {
        'created_at': 'created_at',
        'duration': 'duration',
        'duration_pretty': 'duration_pretty',
        'finished': 'finished',
        'id': 'id',
        'slug': 'slug',
        'time_end': 'time_end',
        'time_start': 'time_start',
        'title': 'title',
        'updated_at': 'updated_at',
        'video': 'video'
    }

    def __init__(self, created_at=None, duration=None, duration_pretty=None, finished=None, id=None, slug=None, time_end=None, time_start=None, title=None, updated_at=None, video=None):  # noqa: E501
        """Clip - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._duration = None
        self._duration_pretty = None
        self._finished = None
        self._id = None
        self._slug = None
        self._time_end = None
        self._time_start = None
        self._title = None
        self._updated_at = None
        self._video = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if duration is not None:
            self.duration = duration
        if duration_pretty is not None:
            self.duration_pretty = duration_pretty
        if finished is not None:
            self.finished = finished
        if id is not None:
            self.id = id
        if slug is not None:
            self.slug = slug
        if time_end is not None:
            self.time_end = time_end
        if time_start is not None:
            self.time_start = time_start
        if title is not None:
            self.title = title
        if updated_at is not None:
            self.updated_at = updated_at
        if video is not None:
            self.video = video

    @property
    def created_at(self):
        """Gets the created_at of this Clip.  # noqa: E501


        :return: The created_at of this Clip.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Clip.


        :param created_at: The created_at of this Clip.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this Clip.  # noqa: E501


        :return: The duration of this Clip.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Clip.


        :param duration: The duration of this Clip.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def duration_pretty(self):
        """Gets the duration_pretty of this Clip.  # noqa: E501


        :return: The duration_pretty of this Clip.  # noqa: E501
        :rtype: str
        """
        return self._duration_pretty

    @duration_pretty.setter
    def duration_pretty(self, duration_pretty):
        """Sets the duration_pretty of this Clip.


        :param duration_pretty: The duration_pretty of this Clip.  # noqa: E501
        :type: str
        """

        self._duration_pretty = duration_pretty

    @property
    def finished(self):
        """Gets the finished of this Clip.  # noqa: E501


        :return: The finished of this Clip.  # noqa: E501
        :rtype: object
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Clip.


        :param finished: The finished of this Clip.  # noqa: E501
        :type: object
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this Clip.  # noqa: E501


        :return: The id of this Clip.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Clip.


        :param id: The id of this Clip.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Clip.  # noqa: E501


        :return: The slug of this Clip.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Clip.


        :param slug: The slug of this Clip.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def time_end(self):
        """Gets the time_end of this Clip.  # noqa: E501


        :return: The time_end of this Clip.  # noqa: E501
        :rtype: float
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end):
        """Sets the time_end of this Clip.


        :param time_end: The time_end of this Clip.  # noqa: E501
        :type: float
        """

        self._time_end = time_end

    @property
    def time_start(self):
        """Gets the time_start of this Clip.  # noqa: E501


        :return: The time_start of this Clip.  # noqa: E501
        :rtype: float
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start):
        """Sets the time_start of this Clip.


        :param time_start: The time_start of this Clip.  # noqa: E501
        :type: float
        """

        self._time_start = time_start

    @property
    def title(self):
        """Gets the title of this Clip.  # noqa: E501


        :return: The title of this Clip.  # noqa: E501
        :rtype: object
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Clip.


        :param title: The title of this Clip.  # noqa: E501
        :type: object
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this Clip.  # noqa: E501


        :return: The updated_at of this Clip.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Clip.


        :param updated_at: The updated_at of this Clip.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def video(self):
        """Gets the video of this Clip.  # noqa: E501


        :return: The video of this Clip.  # noqa: E501
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Clip.


        :param video: The video of this Clip.  # noqa: E501
        :type: Video
        """

        self._video = video

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Clip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Clip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

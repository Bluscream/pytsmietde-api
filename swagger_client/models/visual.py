# coding: utf-8

"""
    Pietsmiet.de API

    OpenAPI spec generated from HAR data for www.pietsmiet.de on 2024-09-03T03:22:16.459Z  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Visual(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspect_ratio': 'str',
        'brand': 'Brand',
        'fluid': 'bool',
        'responsive': 'bool',
        'thumbnail': 'str'
    }

    attribute_map = {
        'aspect_ratio': 'aspect_ratio',
        'brand': 'brand',
        'fluid': 'fluid',
        'responsive': 'responsive',
        'thumbnail': 'thumbnail'
    }

    def __init__(self, aspect_ratio=None, brand=None, fluid=None, responsive=None, thumbnail=None):  # noqa: E501
        """Visual - a model defined in Swagger"""  # noqa: E501
        self._aspect_ratio = None
        self._brand = None
        self._fluid = None
        self._responsive = None
        self._thumbnail = None
        self.discriminator = None
        if aspect_ratio is not None:
            self.aspect_ratio = aspect_ratio
        if brand is not None:
            self.brand = brand
        if fluid is not None:
            self.fluid = fluid
        if responsive is not None:
            self.responsive = responsive
        if thumbnail is not None:
            self.thumbnail = thumbnail

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Visual.  # noqa: E501


        :return: The aspect_ratio of this Visual.  # noqa: E501
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Visual.


        :param aspect_ratio: The aspect_ratio of this Visual.  # noqa: E501
        :type: str
        """
        allowed_values = ["16:9"]  # noqa: E501
        if aspect_ratio not in allowed_values:
            raise ValueError(
                "Invalid value for `aspect_ratio` ({0}), must be one of {1}"  # noqa: E501
                .format(aspect_ratio, allowed_values)
            )

        self._aspect_ratio = aspect_ratio

    @property
    def brand(self):
        """Gets the brand of this Visual.  # noqa: E501


        :return: The brand of this Visual.  # noqa: E501
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Visual.


        :param brand: The brand of this Visual.  # noqa: E501
        :type: Brand
        """

        self._brand = brand

    @property
    def fluid(self):
        """Gets the fluid of this Visual.  # noqa: E501


        :return: The fluid of this Visual.  # noqa: E501
        :rtype: bool
        """
        return self._fluid

    @fluid.setter
    def fluid(self, fluid):
        """Sets the fluid of this Visual.


        :param fluid: The fluid of this Visual.  # noqa: E501
        :type: bool
        """

        self._fluid = fluid

    @property
    def responsive(self):
        """Gets the responsive of this Visual.  # noqa: E501


        :return: The responsive of this Visual.  # noqa: E501
        :rtype: bool
        """
        return self._responsive

    @responsive.setter
    def responsive(self, responsive):
        """Sets the responsive of this Visual.


        :param responsive: The responsive of this Visual.  # noqa: E501
        :type: bool
        """

        self._responsive = responsive

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Visual.  # noqa: E501


        :return: The thumbnail of this Visual.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Visual.


        :param thumbnail: The thumbnail of this Visual.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Visual, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visual):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
